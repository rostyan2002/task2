import random

class BoardOutException(Exception):
    pass

class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

class Ship:
    def __init__(self, bow, l, o):
        self.bow = bow
        self.l = l
        self.o = o
        self.lives = l

    @property
    def dots(self):
        ship_dots = []
        for i in range(self.l):
            cur_x = self.bow.x
            cur_y = self.bow.y

            if self.o == 0:
                cur_x += i
            elif self.o == 1:
                cur_y += i

            ship_dots.append(Dot(cur_x, cur_y))

        return ship_dots

    def shooten(self, shot):
        return shot in self.dots

class Board:
    def __init__(self, hid=False, size=6):
        self.size = size
        self.hid = hid

        self.count = 0

        self.field = [["O"] * size for _ in range(size)]

        self.busy = []
        self.ships = []

    def add_ship(self, ship):
        for d in ship.dots:
            if self.out(d) or d in self.busy:
                raise BoardOutException()
        for d in ship.dots:
            self.field[d.x][d.y] = "■"
            self.busy.append(d)

        self.ships.append(ship)
        self.contour(ship)

    def contour(self, ship, verb=False):
        near = [(-1, -1), (-1, 0), (-1, 1),
                (0, -1), (0, 0), (0, 1),
                (1, -1), (1, 0), (1, 1)]

        for d in ship.dots:
            for dx, dy in near:
                cur = Dot(d.x + dx, d.y + dy)
                if not(self.out(cur)) and cur not in self.busy:
                    if verb:
                        self.field[cur.x][cur.y] = "."
                    self.busy.append(cur)

    def __str__(self):
        res = ""
        res += "  | 1 | 2 | 3 | 4 | 5 | 6 |\n"
        for i, row in enumerate(self.field):
            row_str = " | ".join(row)
            res += f"{i + 1} | {row_str} |\n"
        return res

    def out(self, d):
        return not((0 <= d.x < self.size) and (0 <= d.y < self.size))

    def shot(self, d):
        if self.out(d):
            raise BoardOutException()

        if d in self.busy:
            raise BoardBusyException()

        self.busy.append(d)

        for ship in self.ships:
            if ship.shooten(d):
                ship.lives -= 1
                self.field[d.x][d.y] = "X"
                if ship.lives == 0:
                    self.count += 1
                    self.contour(ship, verb=True)
                    print("Корабль потоплен!")
                    return False
                else:
                    print("Корабль ранен!")
                    return True

        self.field[d.x][d.y] = "."
        print("Мимо!")
        return False

    def begin(self):
        while True:
            coords = input("Введите координаты выстрела (через пробел): ").split()
            if len(coords) != 2:
                print("Введите две координаты!")
                continue
            x, y = coords
            try:
                x = int(x)
                y = int(y)
            except ValueError:
                print("Введите числа!")
                continue

            return Dot(x - 1, y - 1)

    def defeat(self):
                return self.count == len(self.ships)

class Player:
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy

    def ask(self):
        raise NotImplementedError()

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except BoardException as e:
                print(e)

class AI(Player):
    def ask(self):
        return Dot(random.randint(0, 5), random.randint(0, 5))

class User(Player):
    def ask(self):
        while True:
            coords = input("Введите координаты выстрела (через пробел): ").split()
            if len(coords) != 2:
                print("Введите две координаты!")
                continue
            x, y = coords
            try:
                x = int(x)
                y = int(y)
            except ValueError:
                print("Введите числа!")
                continue

            return Dot(x - 1, y - 1)

class Game:
    def __init__(self):
        hidden = False
        size = 6
        self.ai = AI(Board(hidden, size), Board(hidden, size))

    def print_board(self):
        print("-" * 20)
        print("Доска пользователя:")
        print(self.ai.us.board)
        print("-" * 20)
        print("Доска компьютера:")
        print(self.ai.enemy.board)
        print("-" * 20)

    def loop(self):
        num = 0
        while True:
            if num % 2 == 0:
                repeat = self.ai.us.move()
            else:
                repeat = self.ai.enemy.move()
            if repeat:
                num -= 1

            self.print_board()

            if self.ai.us.board.defeat():
                print("Компьютер победил!")
                break

            if self.ai.enemy.board.defeat():
                print("Вы победили!")
                break

            num += 1

    def start(self):
        self.ai.enemy.board.begin()

        self.print_board()

        self.loop()
